// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  displayName    String
  password       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userProfile    UserProfile?
  roles          Roles[]      @default([USER])
  creatorRequest CreatorRequest?
  creatorProfile CreatorProfile?
}

model Session {
  id          String   @id
  sid         String   @unique
  data        String
  expiresAt   DateTime
}

model UserProfile {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int         @unique
  avatar        String
  birthday      DateTime
  bio           String?     @db.VarChar(500)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum Roles {
  USER
  CREATOR
  EDITOR
  MODERATOR
  ADMIN
}

model CreatorProfile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  bio         String?  @db.VarChar(500)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bannerImage String?
}

model CreatorRequest {
  id                Int                       @id @default(autoincrement())
  userId            Int                       @unique
  user              User                      @relation(fields: [userId], references: [id])
  requestedAt       DateTime                  @default(now())
  approvedAt        DateTime?
  rejectedAt        DateTime?
  reason            String?                   @db.VarChar(255)
  emailVerification CreatorEmailVerification?
  accountAge        Int
  status            CreatorRequestStatus      @default(PENDING)
}

enum CreatorRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model CreatorEmailVerification {
  id                Int             @id @default(autoincrement())
  verificationId    String          @unique @default(cuid())
  creatorRequest    CreatorRequest  @relation(fields: [creatorRequestId], references: [id], onDelete: Cascade)
  creatorRequestId  Int             @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  expiresAt         DateTime
  verified          Boolean         @default(false)
}